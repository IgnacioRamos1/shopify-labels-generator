service: shopify-csv-generator

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage}
  region: sa-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:ListAllMyBuckets
            - s3:PutObject
            - s3:GetObject
            - s3:CreateBucket
            - s3:PutLifecycleConfiguration
          Resource: "arn:aws:s3:::*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*" 
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:CreateTable
            - dynamodb:ListTables
            - dynamodb:DescribeTable
            - dynamodb:UpdateTimeToLive
          Resource: "arn:aws:dynamodb:sa-east-1:421852645480:table/*"
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:DescribeParameters
          Resource: "*"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:ListSecrets
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
          Resource: 
            - "arn:aws:sqs:sa-east-1:*:shop-processor-queue-${self:provider.stage}"
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            Fn::Join:
              - ":"
              - - "arn:aws:sns"
                - Ref: "AWS::Region"
                - Ref: "AWS::AccountId"
                - 
                  Fn::Join:
                    - "-"
                    - - "LambdaErrorNotifications"
                      - ${self:provider.stage}
        - Effect: Allow
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"

package:
  exclude:
    - .env

functions:
  triggerProcessing:
    handler: handler.trigger_shop_processing
    timeout: 30
    logRetentionInDays: 5
    environment:
      STAGE: ${self:provider.stage}
      SQS_QUEUE_NAME: shop-processor-queue-${self:provider.stage}
    events:
      ${self:custom.weeklyCronEvent.${self:provider.stage}}
    package:
      include:
        - db/**

  processShop:
    handler: handler.process_shop
    timeout: 30
    logRetentionInDays: 5
    environment:
      STAGE: ${self:provider.stage}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ShopProcessorQueue
              - Arn
          batchSize: 1  # Procesa un mensaje (tienda) a la vez.
  
  triggerSundayProcessing:
    handler: cron_handler.trigger_processing
    timeout: 30
    logRetentionInDays: 5
    environment:
      STAGE: ${self:provider.stage}
      SQS_QUEUE_NAME: shop-processor-queue-${self:provider.stage}
    events:
      ${self:custom.sundayCronEvent.${self:provider.stage}}

resources:
  Resources:
    ShopProcessorQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: shop-processor-queue-${self:provider.stage}
    LambdaErrorNotifications:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Lambda Error Notifications-${self:provider.stage}"
        TopicName: "LambdaErrorNotifications-${self:provider.stage}"
    LambdaFunctionErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Triggered when the Lambda function has errors"
        Namespace: "AWS/Lambda"
        MetricName: "Errors"
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        AlarmActions:
          - Ref: LambdaErrorNotifications
        Dimensions:
          - Name: "FunctionName"
            Value:
              Fn::GetAtt:
                - "ProcessShopLambdaFunction"
                - "Arn"
    postgresInstance:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        DBInstanceIdentifier: postgres-shopify-db
        PubliclyAccessible: true
        Engine: postgres
        EngineVersion: '14.6'
        DBInstanceClass: db.t4g.micro
        AllocatedStorage: 20
        DBName: ${ssm:/db_name}
        MasterUsername: ${ssm:/db_username}
        MasterUserPassword: ${ssm:/db_password}


plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    requirementsFile: requirements.txt
  weeklyCronEvent:
    prod:
      - schedule: cron(0 20 ? * MON-SAT *)
    dev: []
  sundayCronEvent:
    prod:
      - schedule: cron(0 18 ? * SUN *)
    dev: []
