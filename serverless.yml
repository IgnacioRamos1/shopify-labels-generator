service: shopify-csv-generator

provider:
  name: aws
  runtime: python3.11
  stage: dev
  region: sa-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:ListAllMyBuckets
            - s3:PutObject
            - s3:GetObject
            - s3:HeadBucket
            - s3:CreateBucket
            - s3:PutBucketLifecycleConfiguration
          Resource: "arn:aws:s3:::*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:CreateTable
            - dynamodb:ListTables
            - dynamodb:DescribeTable
            - dynamodb:UpdateTimeToLive
          Resource: "arn:aws:dynamodb:sa-east-1:421852645480:table/*"
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:DescribeParameters
          Resource: "*"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:ListSecrets
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
          Resource: 
            - "arn:aws:sqs:sa-east-1:*:shop-processor-queue"
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            Ref: LambdaErrorNotifications
   

functions:
  triggerProcessing:
    handler: handler.trigger_shop_processing
    timeout: 30
    events:
      - schedule: cron(0 20 * * ? *)

  processShop:
    handler: handler.process_shop
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ShopProcessorQueue
              - Arn
          batchSize: 1  # Procesa un mensaje (tienda) a la vez.

resources:
  Resources:
    ShopProcessorQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: shop-processor-queue
    LambdaErrorNotifications:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Lambda Error Notifications"
        TopicName: "LambdaErrorNotifications"
    LambdaFunctionErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Triggered when the Lambda function has errors"
        Namespace: "AWS/Lambda"
        MetricName: "Errors"
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        AlarmActions:
          - Ref: LambdaErrorNotifications
        Dimensions:
          - Name: "FunctionName"
            Value:
              Fn::GetAtt:
                - "ProcessShopLambdaFunction"
                - "Arn"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    requirementsFile: requirements.txt
